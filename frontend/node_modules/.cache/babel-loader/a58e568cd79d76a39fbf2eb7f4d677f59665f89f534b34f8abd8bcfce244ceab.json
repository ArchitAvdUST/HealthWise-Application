{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Training\\\\Capstone Project\\\\HealthWise-Application\\\\frontend\\\\src\\\\patient\\\\GetAppointments.tsx\";\nimport React from 'react';\nimport { Box, Typography, Container, List, ListItem, ListItemText, Divider } from '@mui/material';\nimport Navbar from './components/PatientNavbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetAppointments = () => {\n  {/*\r\n   const [appointments, setAppointments] = useState<Appointment[]>([]);\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState<string | null>(null);\r\n   useEffect(() => {\r\n   const fetchAppointments = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const token = sessionStorage.getItem('token');\r\n      \r\n      // Fetching appointments\r\n      const response = await axios.get('/api/appointments', {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      const fetchedAppointments = response.data;\r\n      \r\n      // Fetch doctor names for each appointment\r\n      const appointmentsWithDoctorNames = await Promise.all(\r\n        fetchedAppointments.map(async (appointment: Appointment) => {\r\n          const doctorResponse = await axios.get(`/api/doctors/${appointment.doctorId}`, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n          return { ...appointment, doctorName: doctorResponse.data.name };\r\n        })\r\n      );\r\n        setAppointments(appointmentsWithDoctorNames);\r\n    } catch (err) {\r\n      setError('Failed to load appointments');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n   };\r\n    fetchAppointments();\r\n   }, []);\r\n   if (loading) {\r\n   return <CircularProgress />;\r\n   }\r\n   if (error) {\r\n   return <Alert severity=\"error\">{error}</Alert>;\r\n   }\r\n   */}\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        mt: 4,\n        textAlign: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          color: \"primary\",\n          children: \"Your Appointments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: appointments.map(appointment => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: `Date: ${appointment.date}, Time: ${appointment.time}`,\n              secondary: `Doctor: ${appointment.doctorName}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, appointment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_c = GetAppointments;\nexport default GetAppointments;\nvar _c;\n$RefreshReg$(_c, \"GetAppointments\");","map":{"version":3,"names":["React","Box","Typography","Container","List","ListItem","ListItemText","Divider","Navbar","jsxDEV","_jsxDEV","GetAppointments","children","fileName","_jsxFileName","lineNumber","columnNumber","mt","textAlign","variant","color","appointments","map","appointment","Fragment","primary","date","time","secondary","doctorName","id","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/Training/Capstone Project/HealthWise-Application/frontend/src/patient/GetAppointments.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Box, Typography, Container, CircularProgress, Alert, List, ListItem, ListItemText, Divider } from '@mui/material';\r\nimport Navbar from './components/PatientNavbar';\r\n\r\ninterface Appointment {\r\n  id: string;\r\n  date: string;\r\n  time: string;\r\n  doctorId: string;\r\n  doctorName?: string; // Optional, to be populated later\r\n}\r\n\r\nconst GetAppointments: React.FC = () => {\r\n    {/*\r\n  const [appointments, setAppointments] = useState<Appointment[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchAppointments = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const token = sessionStorage.getItem('token');\r\n        \r\n        // Fetching appointments\r\n        const response = await axios.get('/api/appointments', {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        const fetchedAppointments = response.data;\r\n        \r\n        // Fetch doctor names for each appointment\r\n        const appointmentsWithDoctorNames = await Promise.all(\r\n          fetchedAppointments.map(async (appointment: Appointment) => {\r\n            const doctorResponse = await axios.get(`/api/doctors/${appointment.doctorId}`, {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            return { ...appointment, doctorName: doctorResponse.data.name };\r\n          })\r\n        );\r\n\r\n        setAppointments(appointmentsWithDoctorNames);\r\n      } catch (err) {\r\n        setError('Failed to load appointments');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAppointments();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <CircularProgress />;\r\n  }\r\n\r\n  if (error) {\r\n    return <Alert severity=\"error\">{error}</Alert>;\r\n  }\r\n  */}\r\n\r\n  return (\r\n    <div>\r\n      {/* Navbar */}\r\n      <Navbar />\r\n\r\n      {/* Appointments List */}\r\n      <Container>\r\n        <Box mt={4} textAlign=\"center\">\r\n          <Typography variant=\"h5\" color=\"primary\">\r\n            Your Appointments\r\n          </Typography>\r\n        </Box>\r\n\r\n        <List>\r\n          {appointments.map((appointment) => (\r\n            <React.Fragment key={appointment.id}>\r\n              <ListItem>\r\n                <ListItemText\r\n                  primary={`Date: ${appointment.date}, Time: ${appointment.time}`}\r\n                  secondary={`Doctor: ${appointment.doctorName}`}\r\n                />\r\n              </ListItem>\r\n              <Divider />\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GetAppointments;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAA+B,OAAO;AAElD,SAASC,GAAG,EAAEC,UAAU,EAAEC,SAAS,EAA2BC,IAAI,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,OAAO,QAAQ,eAAe;AAC1H,OAAOC,MAAM,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUhD,MAAMC,eAAyB,GAAGA,CAAA,KAAM;EACpC,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAxCK;EA+CH,oBACED,OAAA;IAAAE,QAAA,gBAEEF,OAAA,CAACF,MAAM;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGVN,OAAA,CAACP,SAAS;MAAAS,QAAA,gBACRF,OAAA,CAACT,GAAG;QAACgB,EAAE,EAAE,CAAE;QAACC,SAAS,EAAC,QAAQ;QAAAN,QAAA,eAC5BF,OAAA,CAACR,UAAU;UAACiB,OAAO,EAAC,IAAI;UAACC,KAAK,EAAC,SAAS;UAAAR,QAAA,EAAC;QAEzC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eAENN,OAAA,CAACN,IAAI;QAAAQ,QAAA,EACFS,YAAY,CAACC,GAAG,CAAEC,WAAW,iBAC5Bb,OAAA,CAACV,KAAK,CAACwB,QAAQ;UAAAZ,QAAA,gBACbF,OAAA,CAACL,QAAQ;YAAAO,QAAA,eACPF,OAAA,CAACJ,YAAY;cACXmB,OAAO,EAAE,SAASF,WAAW,CAACG,IAAI,WAAWH,WAAW,CAACI,IAAI,EAAG;cAChEC,SAAS,EAAE,WAAWL,WAAW,CAACM,UAAU;YAAG;cAAAhB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChD;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACXN,OAAA,CAACH,OAAO;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA,GAPQO,WAAW,CAACO,EAAE;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQnB,CACjB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV,CAAC;AAACe,EAAA,GA7EIpB,eAAyB;AA+E/B,eAAeA,eAAe;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}